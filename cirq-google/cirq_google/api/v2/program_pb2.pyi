"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Program(google.protobuf.message.Message):
    """A quantum program."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    CIRCUIT_FIELD_NUMBER: builtins.int
    SCHEDULE_FIELD_NUMBER: builtins.int
    CONSTANTS_FIELD_NUMBER: builtins.int
    @property
    def language(self) -> global___Language:
        """The language in which the program is written."""

    @property
    def circuit(self) -> global___Circuit:
        """A circuit is an abstract representation as a series of moments, each
        moment having a set of gates that act on disjoint qubits. Circuits don't
        have absolute times for their operations (gates acting on qubits).
        """

    @property
    def schedule(self) -> global___Schedule:
        """Schedules are a list of operations (gates acting on qubits) that specify
        absolute start times for the operations.
        """

    @property
    def constants(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Constant]:
        """List to store global constants, such as strings used in many places.
        constants are referred to their index in this list, starting at zero.
        """

    def __init__(
        self,
        *,
        language: global___Language | None = ...,
        circuit: global___Circuit | None = ...,
        schedule: global___Schedule | None = ...,
        constants: collections.abc.Iterable[global___Constant] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["circuit", b"circuit", "language", b"language", "program", b"program", "schedule", b"schedule"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["circuit", b"circuit", "constants", b"constants", "language", b"language", "program", b"program", "schedule", b"schedule"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["program", b"program"]) -> typing.Literal["circuit", "schedule"] | None: ...

global___Program = Program

@typing.final
class Constant(google.protobuf.message.Message):
    """Constants, such as long strings, that are used throughout the circuit.
    These constants can be stored here to save space.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    CIRCUIT_VALUE_FIELD_NUMBER: builtins.int
    QUBIT_FIELD_NUMBER: builtins.int
    string_value: builtins.str
    """String value used throughout the circuit, such as for token values"""
    @property
    def circuit_value(self) -> global___Circuit:
        """Sub Circuit used for CircuitOperations"""

    @property
    def qubit(self) -> global___Qubit:
        """Qubits used within the circuit (only populated in v2.5+)"""

    def __init__(
        self,
        *,
        string_value: builtins.str = ...,
        circuit_value: global___Circuit | None = ...,
        qubit: global___Qubit | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["circuit_value", b"circuit_value", "const_value", b"const_value", "qubit", b"qubit", "string_value", b"string_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["circuit_value", b"circuit_value", "const_value", b"const_value", "qubit", b"qubit", "string_value", b"string_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["const_value", b"const_value"]) -> typing.Literal["string_value", "circuit_value", "qubit"] | None: ...

global___Constant = Constant

@typing.final
class Circuit(google.protobuf.message.Message):
    """The quantum circuit, specified as a series of moments (abstract
    slices of times with gates acting on disjoint sets of qubits).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _SchedulingStrategy:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SchedulingStrategyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Circuit._SchedulingStrategy.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SCHEDULING_STRATEGY_UNSPECIFIED: Circuit._SchedulingStrategy.ValueType  # 0
        """The scheduling strategy is unspecified."""
        MOMENT_BY_MOMENT: Circuit._SchedulingStrategy.ValueType  # 1
        """Each operation in a moment starts at the same time. The start of the
        next moment is given by the duration of the longest operation in
        the current moment.
        """

    class SchedulingStrategy(_SchedulingStrategy, metaclass=_SchedulingStrategyEnumTypeWrapper):
        """How the circuit is scheduled."""

    SCHEDULING_STRATEGY_UNSPECIFIED: Circuit.SchedulingStrategy.ValueType  # 0
    """The scheduling strategy is unspecified."""
    MOMENT_BY_MOMENT: Circuit.SchedulingStrategy.ValueType  # 1
    """Each operation in a moment starts at the same time. The start of the
    next moment is given by the duration of the longest operation in
    the current moment.
    """

    SCHEDULING_STRATEGY_FIELD_NUMBER: builtins.int
    MOMENTS_FIELD_NUMBER: builtins.int
    scheduling_strategy: global___Circuit.SchedulingStrategy.ValueType
    @property
    def moments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Moment]:
        """The moments of the circuit, with the first element corresponding to the
        first set of operations to apply, etc.
        """

    def __init__(
        self,
        *,
        scheduling_strategy: global___Circuit.SchedulingStrategy.ValueType = ...,
        moments: collections.abc.Iterable[global___Moment] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["moments", b"moments", "scheduling_strategy", b"scheduling_strategy"]) -> None: ...

global___Circuit = Circuit

@typing.final
class Moment(google.protobuf.message.Message):
    """A moment is a collection of operations and circuit operations that operate
    on a disjoint set of qubits. Conceptually, a moment represents operations
    that all occur in the same finite period of time.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPERATIONS_FIELD_NUMBER: builtins.int
    CIRCUIT_OPERATIONS_FIELD_NUMBER: builtins.int
    @property
    def operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Operation]:
        """All of the gate operations in the moment. Each operation and circuit
        operation must act on different qubits.
        """

    @property
    def circuit_operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CircuitOperation]:
        """All of the circuit operations in the moment. Each operation and circuit
        operation must act on different qubits.
        """

    def __init__(
        self,
        *,
        operations: collections.abc.Iterable[global___Operation] | None = ...,
        circuit_operations: collections.abc.Iterable[global___CircuitOperation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["circuit_operations", b"circuit_operations", "operations", b"operations"]) -> None: ...

global___Moment = Moment

@typing.final
class Schedule(google.protobuf.message.Message):
    """The quantum circuit, specified as a series of operations at specific
    start times.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEDULED_OPERATIONS_FIELD_NUMBER: builtins.int
    @property
    def scheduled_operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScheduledOperation]:
        """A list of all the operations and their absolute start times."""

    def __init__(
        self,
        *,
        scheduled_operations: collections.abc.Iterable[global___ScheduledOperation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["scheduled_operations", b"scheduled_operations"]) -> None: ...

global___Schedule = Schedule

@typing.final
class ScheduledOperation(google.protobuf.message.Message):
    """An operation occurring at a specific start time."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPERATION_FIELD_NUMBER: builtins.int
    START_TIME_PICOS_FIELD_NUMBER: builtins.int
    start_time_picos: builtins.int
    """The start time of the operation, with zero representing the absolute
    start of the circuit.

    This must be consistent with the moment structure and must be positive.
    """
    @property
    def operation(self) -> global___Operation:
        """Which operation is to be scheduled."""

    def __init__(
        self,
        *,
        operation: global___Operation | None = ...,
        start_time_picos: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operation", b"operation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["operation", b"operation", "start_time_picos", b"start_time_picos"]) -> None: ...

global___ScheduledOperation = ScheduledOperation

@typing.final
class Language(google.protobuf.message.Message):
    """The language in which the program is expressed."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GATE_SET_FIELD_NUMBER: builtins.int
    ARG_FUNCTION_LANGUAGE_FIELD_NUMBER: builtins.int
    gate_set: builtins.str
    """The name of the gate set being used.

    Valid names for the gate sets can be found in
    cirq_google/serialization/gate_sets.py.

    Deprecated: A device now only supports a single gate set.
    Previously, the value of this field also refers to the name of the
    serializer for the program. Currently, the only serializer available is
    CircuitSerializer in cirq_google/serialization/circuit_serializer.py.
    """
    arg_function_language: builtins.str
    """The language supported by ArgFunctions. These specifies what allowed
    ArgFunction types there are.

    Valid names for the arg function language can be found in
    cirq/google/arg_func_langs.py
    """
    def __init__(
        self,
        *,
        gate_set: builtins.str = ...,
        arg_function_language: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["arg_function_language", b"arg_function_language", "gate_set", b"gate_set"]) -> None: ...

global___Language = Language

@typing.final
class FloatArg(google.protobuf.message.Message):
    """Argument that is constrained to a float or symbolic expression"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FLOAT_VALUE_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    FUNC_FIELD_NUMBER: builtins.int
    float_value: builtins.float
    symbol: builtins.str
    @property
    def func(self) -> global___ArgFunction: ...
    def __init__(
        self,
        *,
        float_value: builtins.float = ...,
        symbol: builtins.str = ...,
        func: global___ArgFunction | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["arg", b"arg", "float_value", b"float_value", "func", b"func", "symbol", b"symbol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["arg", b"arg", "float_value", b"float_value", "func", b"func", "symbol", b"symbol"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["arg", b"arg"]) -> typing.Literal["float_value", "symbol", "func"] | None: ...

global___FloatArg = FloatArg

@typing.final
class XPowGate(google.protobuf.message.Message):
    """Representation of cirq.XPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent"]) -> None: ...

global___XPowGate = XPowGate

@typing.final
class YPowGate(google.protobuf.message.Message):
    """Representation of cirq.YPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent"]) -> None: ...

global___YPowGate = YPowGate

@typing.final
class ZPowGate(google.protobuf.message.Message):
    """Representation of cirq.ZPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    IS_PHYSICAL_Z_FIELD_NUMBER: builtins.int
    is_physical_z: builtins.bool
    """If true, this is equivalent to:
    cirq.ZPowGate(...).with_tags(cirq.google.PhysicalZTag)
    """
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
        is_physical_z: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent", "is_physical_z", b"is_physical_z"]) -> None: ...

global___ZPowGate = ZPowGate

@typing.final
class PhasedXPowGate(google.protobuf.message.Message):
    """Representation of cirq.PhasedXPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PHASE_EXPONENT_FIELD_NUMBER: builtins.int
    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def phase_exponent(self) -> global___FloatArg: ...
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        phase_exponent: global___FloatArg | None = ...,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent", "phase_exponent", b"phase_exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent", "phase_exponent", b"phase_exponent"]) -> None: ...

global___PhasedXPowGate = PhasedXPowGate

@typing.final
class PhasedXZGate(google.protobuf.message.Message):
    """Representation of cirq.PhasedXZGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_EXPONENT_FIELD_NUMBER: builtins.int
    Z_EXPONENT_FIELD_NUMBER: builtins.int
    AXIS_PHASE_EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def x_exponent(self) -> global___FloatArg: ...
    @property
    def z_exponent(self) -> global___FloatArg: ...
    @property
    def axis_phase_exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        x_exponent: global___FloatArg | None = ...,
        z_exponent: global___FloatArg | None = ...,
        axis_phase_exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["axis_phase_exponent", b"axis_phase_exponent", "x_exponent", b"x_exponent", "z_exponent", b"z_exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["axis_phase_exponent", b"axis_phase_exponent", "x_exponent", b"x_exponent", "z_exponent", b"z_exponent"]) -> None: ...

global___PhasedXZGate = PhasedXZGate

@typing.final
class CZPowGate(google.protobuf.message.Message):
    """Representation of cirq.CZPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent"]) -> None: ...

global___CZPowGate = CZPowGate

@typing.final
class FSimGate(google.protobuf.message.Message):
    """Representation of cirq.FSimGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    THETA_FIELD_NUMBER: builtins.int
    PHI_FIELD_NUMBER: builtins.int
    TRANSLATE_VIA_MODEL_FIELD_NUMBER: builtins.int
    translate_via_model: builtins.bool
    """If true, this is equivalent to:
    cirq.FSimGate(...).with_tags(cirq_google.FSimViaModelTag()).
    This field controls how we translate the gate implementation.
    """
    @property
    def theta(self) -> global___FloatArg: ...
    @property
    def phi(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        theta: global___FloatArg | None = ...,
        phi: global___FloatArg | None = ...,
        translate_via_model: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["phi", b"phi", "theta", b"theta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["phi", b"phi", "theta", b"theta", "translate_via_model", b"translate_via_model"]) -> None: ...

global___FSimGate = FSimGate

@typing.final
class ISwapPowGate(google.protobuf.message.Message):
    """Representation of cirq.ISwapPowGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent"]) -> None: ...

global___ISwapPowGate = ISwapPowGate

@typing.final
class MeasurementGate(google.protobuf.message.Message):
    """Representation of cirq.MeasurementGate
    i.e. cirq.measure
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    INVERT_MASK_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___Arg: ...
    @property
    def invert_mask(self) -> global___Arg: ...
    def __init__(
        self,
        *,
        key: global___Arg | None = ...,
        invert_mask: global___Arg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["invert_mask", b"invert_mask", "key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["invert_mask", b"invert_mask", "key", b"key"]) -> None: ...

global___MeasurementGate = MeasurementGate

@typing.final
class WaitGate(google.protobuf.message.Message):
    """Representation of cirq.WAitGate"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATION_NANOS_FIELD_NUMBER: builtins.int
    @property
    def duration_nanos(self) -> global___FloatArg:
        """Duration of the waiting period,
        serialized to the number of nanoseconds
        """

    def __init__(
        self,
        *,
        duration_nanos: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["duration_nanos", b"duration_nanos"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["duration_nanos", b"duration_nanos"]) -> None: ...

global___WaitGate = WaitGate

@typing.final
class Operation(google.protobuf.message.Message):
    """An operation acts on a set of qubits."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ArgsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Arg: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Arg | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    GATE_FIELD_NUMBER: builtins.int
    XPOWGATE_FIELD_NUMBER: builtins.int
    YPOWGATE_FIELD_NUMBER: builtins.int
    ZPOWGATE_FIELD_NUMBER: builtins.int
    PHASEDXPOWGATE_FIELD_NUMBER: builtins.int
    PHASEDXZGATE_FIELD_NUMBER: builtins.int
    CZPOWGATE_FIELD_NUMBER: builtins.int
    FSIMGATE_FIELD_NUMBER: builtins.int
    ISWAPPOWGATE_FIELD_NUMBER: builtins.int
    MEASUREMENTGATE_FIELD_NUMBER: builtins.int
    WAITGATE_FIELD_NUMBER: builtins.int
    INTERNALGATE_FIELD_NUMBER: builtins.int
    COUPLERPULSEGATE_FIELD_NUMBER: builtins.int
    IDENTITYGATE_FIELD_NUMBER: builtins.int
    HPOWGATE_FIELD_NUMBER: builtins.int
    SINGLEQUBITCLIFFORDGATE_FIELD_NUMBER: builtins.int
    ARGS_FIELD_NUMBER: builtins.int
    QUBITS_FIELD_NUMBER: builtins.int
    QUBIT_CONSTANT_INDEX_FIELD_NUMBER: builtins.int
    TOKEN_VALUE_FIELD_NUMBER: builtins.int
    TOKEN_CONSTANT_INDEX_FIELD_NUMBER: builtins.int
    token_value: builtins.str
    token_constant_index: builtins.int
    @property
    def gate(self) -> global___Gate:
        """Which gate this operation corresponds to.
        Populated pre-v2.5+.
        """

    @property
    def xpowgate(self) -> global___XPowGate: ...
    @property
    def ypowgate(self) -> global___YPowGate: ...
    @property
    def zpowgate(self) -> global___ZPowGate: ...
    @property
    def phasedxpowgate(self) -> global___PhasedXPowGate: ...
    @property
    def phasedxzgate(self) -> global___PhasedXZGate: ...
    @property
    def czpowgate(self) -> global___CZPowGate: ...
    @property
    def fsimgate(self) -> global___FSimGate: ...
    @property
    def iswappowgate(self) -> global___ISwapPowGate: ...
    @property
    def measurementgate(self) -> global___MeasurementGate: ...
    @property
    def waitgate(self) -> global___WaitGate: ...
    @property
    def internalgate(self) -> global___InternalGate: ...
    @property
    def couplerpulsegate(self) -> global___CouplerPulseGate: ...
    @property
    def identitygate(self) -> global___IdentityGate: ...
    @property
    def hpowgate(self) -> global___HPowGate: ...
    @property
    def singlequbitcliffordgate(self) -> global___SingleQubitCliffordGate: ...
    @property
    def args(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Arg]:
        """Map from the argument name to the Argument needed to fully specify
        the gate. Only populated pre-v2.5+.
        """

    @property
    def qubits(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Qubit]:
        """Which qubits the operation acts on.
        Operations should populate one of the following two
        fields: either to specify the qubit directly or
        to reference an index in the enclosing Program's
        constant messages.  Note that qubit_constant_index
        will only be populated in v2.5+
        """

    @property
    def qubit_constant_index(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        gate: global___Gate | None = ...,
        xpowgate: global___XPowGate | None = ...,
        ypowgate: global___YPowGate | None = ...,
        zpowgate: global___ZPowGate | None = ...,
        phasedxpowgate: global___PhasedXPowGate | None = ...,
        phasedxzgate: global___PhasedXZGate | None = ...,
        czpowgate: global___CZPowGate | None = ...,
        fsimgate: global___FSimGate | None = ...,
        iswappowgate: global___ISwapPowGate | None = ...,
        measurementgate: global___MeasurementGate | None = ...,
        waitgate: global___WaitGate | None = ...,
        internalgate: global___InternalGate | None = ...,
        couplerpulsegate: global___CouplerPulseGate | None = ...,
        identitygate: global___IdentityGate | None = ...,
        hpowgate: global___HPowGate | None = ...,
        singlequbitcliffordgate: global___SingleQubitCliffordGate | None = ...,
        args: collections.abc.Mapping[builtins.str, global___Arg] | None = ...,
        qubits: collections.abc.Iterable[global___Qubit] | None = ...,
        qubit_constant_index: collections.abc.Iterable[builtins.int] | None = ...,
        token_value: builtins.str = ...,
        token_constant_index: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["couplerpulsegate", b"couplerpulsegate", "czpowgate", b"czpowgate", "fsimgate", b"fsimgate", "gate", b"gate", "gate_value", b"gate_value", "hpowgate", b"hpowgate", "identitygate", b"identitygate", "internalgate", b"internalgate", "iswappowgate", b"iswappowgate", "measurementgate", b"measurementgate", "phasedxpowgate", b"phasedxpowgate", "phasedxzgate", b"phasedxzgate", "singlequbitcliffordgate", b"singlequbitcliffordgate", "token", b"token", "token_constant_index", b"token_constant_index", "token_value", b"token_value", "waitgate", b"waitgate", "xpowgate", b"xpowgate", "ypowgate", b"ypowgate", "zpowgate", b"zpowgate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["args", b"args", "couplerpulsegate", b"couplerpulsegate", "czpowgate", b"czpowgate", "fsimgate", b"fsimgate", "gate", b"gate", "gate_value", b"gate_value", "hpowgate", b"hpowgate", "identitygate", b"identitygate", "internalgate", b"internalgate", "iswappowgate", b"iswappowgate", "measurementgate", b"measurementgate", "phasedxpowgate", b"phasedxpowgate", "phasedxzgate", b"phasedxzgate", "qubit_constant_index", b"qubit_constant_index", "qubits", b"qubits", "singlequbitcliffordgate", b"singlequbitcliffordgate", "token", b"token", "token_constant_index", b"token_constant_index", "token_value", b"token_value", "waitgate", b"waitgate", "xpowgate", b"xpowgate", "ypowgate", b"ypowgate", "zpowgate", b"zpowgate"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["gate_value", b"gate_value"]) -> typing.Literal["xpowgate", "ypowgate", "zpowgate", "phasedxpowgate", "phasedxzgate", "czpowgate", "fsimgate", "iswappowgate", "measurementgate", "waitgate", "internalgate", "couplerpulsegate", "identitygate", "hpowgate", "singlequbitcliffordgate"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["token", b"token"]) -> typing.Literal["token_value", "token_constant_index"] | None: ...

global___Operation = Operation

@typing.final
class Gate(google.protobuf.message.Message):
    """The instruction identifying the action taken on the quantum computer."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Name for the Gate.

    These names must match those specified in the gate set.  This is found
    in cirq/google/gate_sets.py.
    """
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___Gate = Gate

@typing.final
class Qubit(google.protobuf.message.Message):
    """An identifier for a qubit."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Id of the qubit. These depend on the device being scheduled upon.

    Typically ids for qubits on a line are simple string versions of integers,
    while for qubits on a square grid these are integers separated by a
    underscore, i.e. '0_1', '1_2', etc.
    """
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___Qubit = Qubit

@typing.final
class Arg(google.protobuf.message.Message):
    """Arguments needed to specify a gate."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ARG_VALUE_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    FUNC_FIELD_NUMBER: builtins.int
    CONSTANT_INDEX_FIELD_NUMBER: builtins.int
    symbol: builtins.str
    constant_index: builtins.int
    @property
    def arg_value(self) -> global___ArgValue: ...
    @property
    def func(self) -> global___ArgFunction: ...
    def __init__(
        self,
        *,
        arg_value: global___ArgValue | None = ...,
        symbol: builtins.str = ...,
        func: global___ArgFunction | None = ...,
        constant_index: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["arg", b"arg", "arg_value", b"arg_value", "constant_index", b"constant_index", "func", b"func", "symbol", b"symbol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["arg", b"arg", "arg_value", b"arg_value", "constant_index", b"constant_index", "func", b"func", "symbol", b"symbol"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["arg", b"arg"]) -> typing.Literal["arg_value", "symbol", "func", "constant_index"] | None: ...

global___Arg = Arg

@typing.final
class ArgValue(google.protobuf.message.Message):
    """Value that can be passed as an argument to a gate."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FLOAT_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUES_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUES_FIELD_NUMBER: builtins.int
    DOUBLE_VALUES_FIELD_NUMBER: builtins.int
    STRING_VALUES_FIELD_NUMBER: builtins.int
    float_value: builtins.float
    string_value: builtins.str
    double_value: builtins.float
    @property
    def bool_values(self) -> global___RepeatedBoolean: ...
    @property
    def int64_values(self) -> global___RepeatedInt64: ...
    @property
    def double_values(self) -> global___RepeatedDouble: ...
    @property
    def string_values(self) -> global___RepeatedString: ...
    def __init__(
        self,
        *,
        float_value: builtins.float = ...,
        bool_values: global___RepeatedBoolean | None = ...,
        string_value: builtins.str = ...,
        double_value: builtins.float = ...,
        int64_values: global___RepeatedInt64 | None = ...,
        double_values: global___RepeatedDouble | None = ...,
        string_values: global___RepeatedString | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["arg_value", b"arg_value", "bool_values", b"bool_values", "double_value", b"double_value", "double_values", b"double_values", "float_value", b"float_value", "int64_values", b"int64_values", "string_value", b"string_value", "string_values", b"string_values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["arg_value", b"arg_value", "bool_values", b"bool_values", "double_value", b"double_value", "double_values", b"double_values", "float_value", b"float_value", "int64_values", b"int64_values", "string_value", b"string_value", "string_values", b"string_values"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["arg_value", b"arg_value"]) -> typing.Literal["float_value", "bool_values", "string_value", "double_value", "int64_values", "double_values", "string_values"] | None: ...

global___ArgValue = ArgValue

@typing.final
class RepeatedInt64(google.protobuf.message.Message):
    """A repeated int value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___RepeatedInt64 = RepeatedInt64

@typing.final
class RepeatedDouble(google.protobuf.message.Message):
    """A repeated double value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___RepeatedDouble = RepeatedDouble

@typing.final
class RepeatedString(google.protobuf.message.Message):
    """A repeated string value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___RepeatedString = RepeatedString

@typing.final
class RepeatedBoolean(google.protobuf.message.Message):
    """A repeated boolean value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.bool] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___RepeatedBoolean = RepeatedBoolean

@typing.final
class ArgFunction(google.protobuf.message.Message):
    """A function of arguments. This is an s-expression tree representing
    mathematically the function being evaluated.

    What language is supported is specified by the arg_function_language
    in the language message.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    ARGS_FIELD_NUMBER: builtins.int
    type: builtins.str
    """The name of the function. I.e. if the function is the sum of two symbols,
    this could be '+', and the args would be two string symbol values.

    Valid values for the type are given in cirq/google/arg_func_langs.py
    and must be consistent with the arg_function_language specified in the
    language field of the program.
    """
    @property
    def args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Arg]:
        """The arguments to the function."""

    def __init__(
        self,
        *,
        type: builtins.str = ...,
        args: collections.abc.Iterable[global___Arg] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["args", b"args", "type", b"type"]) -> None: ...

global___ArgFunction = ArgFunction

@typing.final
class CircuitOperation(google.protobuf.message.Message):
    """An operation that applies a modified version of a reference circuit. The
    circuit is stored in the top-level Constants table; the mappings in this
    object specify how that circuit should be modified for this operation.

    Multiple CircuitOperations may reference the same base circuit even if their
    mappings of that circuit are different.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CIRCUIT_CONSTANT_INDEX_FIELD_NUMBER: builtins.int
    REPETITION_SPECIFICATION_FIELD_NUMBER: builtins.int
    QUBIT_MAP_FIELD_NUMBER: builtins.int
    MEASUREMENT_KEY_MAP_FIELD_NUMBER: builtins.int
    ARG_MAP_FIELD_NUMBER: builtins.int
    circuit_constant_index: builtins.int
    """The index of the circuit in the top-level constant table."""
    @property
    def repetition_specification(self) -> global___RepetitionSpecification:
        """Specifier for repetitions of the circuit, which contains either a number
        of repetitions or a list of repetition IDs.
        """

    @property
    def qubit_map(self) -> global___QubitMapping:
        """Map from qubits in the "inner" circuit (referenced by
        circuit_constant_index) to qubits in the "outer" circuit (the one that
        contains this operation).
        """

    @property
    def measurement_key_map(self) -> global___MeasurementKeyMapping:
        """Map of measurement keys in the "inner" circuit (referenced by
        circuit_constant_index) to measurement keys in the "outer" circuit (the
        one that contains this operation).
        """

    @property
    def arg_map(self) -> global___ArgMapping:
        """Map of args in the "inner" circuit (referenced by circuit_constant_index)
        to args in the "outer" circuit (the one that contains this operation).
        """

    def __init__(
        self,
        *,
        circuit_constant_index: builtins.int = ...,
        repetition_specification: global___RepetitionSpecification | None = ...,
        qubit_map: global___QubitMapping | None = ...,
        measurement_key_map: global___MeasurementKeyMapping | None = ...,
        arg_map: global___ArgMapping | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["arg_map", b"arg_map", "measurement_key_map", b"measurement_key_map", "qubit_map", b"qubit_map", "repetition_specification", b"repetition_specification"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["arg_map", b"arg_map", "circuit_constant_index", b"circuit_constant_index", "measurement_key_map", b"measurement_key_map", "qubit_map", b"qubit_map", "repetition_specification", b"repetition_specification"]) -> None: ...

global___CircuitOperation = CircuitOperation

@typing.final
class RepetitionSpecification(google.protobuf.message.Message):
    """A description of the repetitions of a subcircuit. IDs are used as suffixes
    for measurements in the repeated subcircuit; if repetition_count is given
    instead, the IDs will simply be the integers [0..N-1].
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class RepetitionIds(google.protobuf.message.Message):
        """An ordered list of IDs for a sequence of repetitions."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        IDS_FIELD_NUMBER: builtins.int
        @property
        def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            ids: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["ids", b"ids"]) -> None: ...

    REPETITION_IDS_FIELD_NUMBER: builtins.int
    REPETITION_COUNT_FIELD_NUMBER: builtins.int
    repetition_count: builtins.int
    """An integer number of repetitions to perform."""
    @property
    def repetition_ids(self) -> global___RepetitionSpecification.RepetitionIds:
        """A list of unique IDs, one per repetition of the subcircuit."""

    def __init__(
        self,
        *,
        repetition_ids: global___RepetitionSpecification.RepetitionIds | None = ...,
        repetition_count: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["repetition_count", b"repetition_count", "repetition_ids", b"repetition_ids", "repetition_value", b"repetition_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["repetition_count", b"repetition_count", "repetition_ids", b"repetition_ids", "repetition_value", b"repetition_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["repetition_value", b"repetition_value"]) -> typing.Literal["repetition_ids", "repetition_count"] | None: ...

global___RepetitionSpecification = RepetitionSpecification

@typing.final
class QubitMapping(google.protobuf.message.Message):
    """A mapping of qubits from one value to another. All mappings are applied
    simultaneously and independently; for example, [(a, b), (b, a)] will swap
    qubits a and b.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class QubitEntry(google.protobuf.message.Message):
        """Indicates that qubit "key" should be replaced with "value"."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def key(self) -> global___Qubit: ...
        @property
        def value(self) -> global___Qubit: ...
        def __init__(
            self,
            *,
            key: global___Qubit | None = ...,
            value: global___Qubit | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___QubitMapping.QubitEntry]:
        """A list of qubit mappings to apply."""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___QubitMapping.QubitEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___QubitMapping = QubitMapping

@typing.final
class MeasurementKey(google.protobuf.message.Message):
    """A key for matching a measurement event to its results."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_KEY_FIELD_NUMBER: builtins.int
    string_key: builtins.str
    def __init__(
        self,
        *,
        string_key: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["string_key", b"string_key"]) -> None: ...

global___MeasurementKey = MeasurementKey

@typing.final
class MeasurementKeyMapping(google.protobuf.message.Message):
    """A mapping of measurement keys from one value to another. All mappings are
    applied simultaneously and independently; for example, [(a, b), (b, a)] will
    swap measurement keys a and b.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MeasurementKeyEntry(google.protobuf.message.Message):
        """Indicates that measurement key "key" should be replaced with "value"."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def key(self) -> global___MeasurementKey: ...
        @property
        def value(self) -> global___MeasurementKey: ...
        def __init__(
            self,
            *,
            key: global___MeasurementKey | None = ...,
            value: global___MeasurementKey | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MeasurementKeyMapping.MeasurementKeyEntry]:
        """A list of measurement key mappings to apply."""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___MeasurementKeyMapping.MeasurementKeyEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___MeasurementKeyMapping = MeasurementKeyMapping

@typing.final
class ArgMapping(google.protobuf.message.Message):
    """A mapping of args from one value to another. All mappings are applied
    simultaneously and independently; for example, [(a, b), (b, a)] will swap
    args a and b.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ArgEntry(google.protobuf.message.Message):
        """Indicates that arg "key" should be replaced with "value"."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def key(self) -> global___Arg: ...
        @property
        def value(self) -> global___Arg: ...
        def __init__(
            self,
            *,
            key: global___Arg | None = ...,
            value: global___Arg | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ArgMapping.ArgEntry]:
        """A list of arg mappings to apply."""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___ArgMapping.ArgEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___ArgMapping = ArgMapping

@typing.final
class InternalGate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class GateArgsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Arg: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Arg | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    MODULE_FIELD_NUMBER: builtins.int
    NUM_QUBITS_FIELD_NUMBER: builtins.int
    GATE_ARGS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Gate name."""
    module: builtins.str
    """Gate module."""
    num_qubits: builtins.int
    """Number of qubits. Required during deserialization."""
    @property
    def gate_args(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Arg]:
        """Gate args."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        module: builtins.str = ...,
        num_qubits: builtins.int = ...,
        gate_args: collections.abc.Mapping[builtins.str, global___Arg] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["gate_args", b"gate_args", "module", b"module", "name", b"name", "num_qubits", b"num_qubits"]) -> None: ...

global___InternalGate = InternalGate

@typing.final
class CouplerPulseGate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOLD_TIME_PS_FIELD_NUMBER: builtins.int
    RISE_TIME_PS_FIELD_NUMBER: builtins.int
    PADDING_TIME_PS_FIELD_NUMBER: builtins.int
    COUPLING_MHZ_FIELD_NUMBER: builtins.int
    Q0_DETUNE_MHZ_FIELD_NUMBER: builtins.int
    Q1_DETUNE_MHZ_FIELD_NUMBER: builtins.int
    @property
    def hold_time_ps(self) -> global___FloatArg:
        """ps=picoseconds."""

    @property
    def rise_time_ps(self) -> global___FloatArg:
        """ps=picoseconds."""

    @property
    def padding_time_ps(self) -> global___FloatArg:
        """ps=picoseconds."""

    @property
    def coupling_mhz(self) -> global___FloatArg: ...
    @property
    def q0_detune_mhz(self) -> global___FloatArg: ...
    @property
    def q1_detune_mhz(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        hold_time_ps: global___FloatArg | None = ...,
        rise_time_ps: global___FloatArg | None = ...,
        padding_time_ps: global___FloatArg | None = ...,
        coupling_mhz: global___FloatArg | None = ...,
        q0_detune_mhz: global___FloatArg | None = ...,
        q1_detune_mhz: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_coupling_mhz", b"_coupling_mhz", "_hold_time_ps", b"_hold_time_ps", "_padding_time_ps", b"_padding_time_ps", "_q0_detune_mhz", b"_q0_detune_mhz", "_q1_detune_mhz", b"_q1_detune_mhz", "_rise_time_ps", b"_rise_time_ps", "coupling_mhz", b"coupling_mhz", "hold_time_ps", b"hold_time_ps", "padding_time_ps", b"padding_time_ps", "q0_detune_mhz", b"q0_detune_mhz", "q1_detune_mhz", b"q1_detune_mhz", "rise_time_ps", b"rise_time_ps"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_coupling_mhz", b"_coupling_mhz", "_hold_time_ps", b"_hold_time_ps", "_padding_time_ps", b"_padding_time_ps", "_q0_detune_mhz", b"_q0_detune_mhz", "_q1_detune_mhz", b"_q1_detune_mhz", "_rise_time_ps", b"_rise_time_ps", "coupling_mhz", b"coupling_mhz", "hold_time_ps", b"hold_time_ps", "padding_time_ps", b"padding_time_ps", "q0_detune_mhz", b"q0_detune_mhz", "q1_detune_mhz", b"q1_detune_mhz", "rise_time_ps", b"rise_time_ps"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_coupling_mhz", b"_coupling_mhz"]) -> typing.Literal["coupling_mhz"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_hold_time_ps", b"_hold_time_ps"]) -> typing.Literal["hold_time_ps"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_padding_time_ps", b"_padding_time_ps"]) -> typing.Literal["padding_time_ps"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_q0_detune_mhz", b"_q0_detune_mhz"]) -> typing.Literal["q0_detune_mhz"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_q1_detune_mhz", b"_q1_detune_mhz"]) -> typing.Literal["q1_detune_mhz"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_rise_time_ps", b"_rise_time_ps"]) -> typing.Literal["rise_time_ps"] | None: ...

global___CouplerPulseGate = CouplerPulseGate

@typing.final
class CliffordTableau(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUM_QUBITS_FIELD_NUMBER: builtins.int
    INITIAL_STATE_FIELD_NUMBER: builtins.int
    RS_FIELD_NUMBER: builtins.int
    XS_FIELD_NUMBER: builtins.int
    ZS_FIELD_NUMBER: builtins.int
    num_qubits: builtins.int
    """Number of qubits the CliffordTableau acts on."""
    initial_state: builtins.int
    """The initial state."""
    @property
    def rs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """A flattened version of the `rs` array."""

    @property
    def xs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """A flattened version of the `xs` array."""

    @property
    def zs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """A flattened version of the `zs` array."""

    def __init__(
        self,
        *,
        num_qubits: builtins.int | None = ...,
        initial_state: builtins.int | None = ...,
        rs: collections.abc.Iterable[builtins.bool] | None = ...,
        xs: collections.abc.Iterable[builtins.bool] | None = ...,
        zs: collections.abc.Iterable[builtins.bool] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_initial_state", b"_initial_state", "_num_qubits", b"_num_qubits", "initial_state", b"initial_state", "num_qubits", b"num_qubits"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_initial_state", b"_initial_state", "_num_qubits", b"_num_qubits", "initial_state", b"initial_state", "num_qubits", b"num_qubits", "rs", b"rs", "xs", b"xs", "zs", b"zs"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_initial_state", b"_initial_state"]) -> typing.Literal["initial_state"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_num_qubits", b"_num_qubits"]) -> typing.Literal["num_qubits"] | None: ...

global___CliffordTableau = CliffordTableau

@typing.final
class SingleQubitCliffordGate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TABLEAU_FIELD_NUMBER: builtins.int
    @property
    def tableau(self) -> global___CliffordTableau: ...
    def __init__(
        self,
        *,
        tableau: global___CliffordTableau | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["tableau", b"tableau"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["tableau", b"tableau"]) -> None: ...

global___SingleQubitCliffordGate = SingleQubitCliffordGate

@typing.final
class IdentityGate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QID_SHAPE_FIELD_NUMBER: builtins.int
    @property
    def qid_shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        qid_shape: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["qid_shape", b"qid_shape"]) -> None: ...

global___IdentityGate = IdentityGate

@typing.final
class HPowGate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPONENT_FIELD_NUMBER: builtins.int
    @property
    def exponent(self) -> global___FloatArg: ...
    def __init__(
        self,
        *,
        exponent: global___FloatArg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exponent", b"exponent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exponent", b"exponent"]) -> None: ...

global___HPowGate = HPowGate
